from __future__ import print_function,unicode_literals,absolute_import,division
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Image_Toolkit\\ImageToolkit.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

__author__ = "MBI"
__doc__ = "Script frond-end"
__version__ = "1.0.0"

from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
#from PyQt5.sip import delete
#from numpy.lib.function_base import select
from ImgAjust import ImgAjust
from ImgFilters import ImgFilter
from ImgQuantized import Ecualized
from ImgTrans import ImageGeometric,ImageMorph,ImageCartoon
import Icons.Image_Toolkit_resource


# Image original max w=239 h=169
# Image transforming max w=659 h=689

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.path = None
        self.imgOrig = None
        self.imgCopy = None
        self.ajustImageDict:dict[str,int] = {
            "Brightness": 50,
            "Contrast": 50,
            "Sharness": 50,
            "Color": 50,
            "Tone": 50,
            "Saturation": 50,
        }
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.WindowModal)
        MainWindow.resize(940,819) 
        MainWindow.setMinimumSize(QtCore.QSize(940,819))
        MainWindow.setMaximumSize(QtCore.QSize(940,819))
        MainWindow.setSizeIncrement(QtCore.QSize(1, 1))
        MainWindow.setBaseSize(QtCore.QSize(940,819))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/origImage.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(20.0)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(90, 90, 90);\n"
        "font: 12pt \"Consolas\";\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "")
        MainWindow.setIconSize(QtCore.QSize(30, 30))
        MainWindow.setDocumentMode(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMinimumSize(QtCore.QSize(940,819))
        self.centralwidget.setMaximumSize(QtCore.QSize(940, 819))
        self.centralwidget.setSizeIncrement(QtCore.QSize(1, 1))
        self.centralwidget.setBaseSize(QtCore.QSize(940,819))
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setStyleSheet("QPushButton:hover { \n"
        "background-color: rgb(245, 245, 100);\n"
        "}\n"
        "QPushButton {\n"
        "background-color:rgb(100,100,100)\n"
        "}\n"
        "QLabel:active{\n"
        "border-color:blue;\n"
        "}\n"
        "QMenuBar:hover{\n"
        "background-color:rgb(245, 245, 100);\n"
        "}\n"
        "\n"
        "\n"
        "")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(260, 30, 661, 691))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(1, 1, 1, 1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setMaximumSize(QtCore.QSize(660, 690))
        self.label.setSizeIncrement(QtCore.QSize(1, 1))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.label.setAutoFillBackground(False)
        self.label.setFrameShape(QtWidgets.QFrame.Panel)
        self.label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label.setLineWidth(4)
        self.label.setMidLineWidth(1)
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.btn = QtWidgets.QPushButton()
        style = self.btn.style()
        icon = style.standardIcon(QtWidgets.QStyle.SP_BrowserReload)
        self.btn.setIcon(icon)
        self.btn.clicked.connect(self.commitImage)
        self.verticalLayout.addWidget(self.btn)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 300, 241, 421))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(2, 2, 2, 2)
        self.verticalLayout_2.setObjectName("verticalLayout_2") ### Set de controls
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 120, 241, 171))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.verticalLayoutWidget_3)
        self.horizontalLayout_2.setContentsMargins(1, 1, 1, 1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_3.setMaximumSize(QtCore.QSize(240, 200))
        self.label_3.setFont(font)
        self.label_3.setAutoFillBackground(False)
        self.label_3.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_3.setLineWidth(4)
        self.label_3.setMidLineWidth(1)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 10, 201, 101))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/Ajust.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(25, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.imgAjust) 
        self.verticalLayout_3.addWidget(self.pushButton)

        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_2.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/filter.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon2)
        self.pushButton_2.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.imgFilter)
        self.verticalLayout_3.addWidget(self.pushButton_2)

        self.pushButton_5 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_5.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Icons/Transformer.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon3)
        self.pushButton_5.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.transformations)
        self.verticalLayout_3.addWidget(self.pushButton_5)

        self.horizontalLayout.addLayout(self.verticalLayout_3)

        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_3.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Icons/quantizer.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon4)
        self.pushButton_3.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.imgQuantized)
        self.verticalLayout_4.addWidget(self.pushButton_3)

        self.pushButton_4 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_4.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/Icons/ic_settings_backup_restore_128_28716.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon5)
        self.pushButton_4.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.restore)
        self.verticalLayout_4.addWidget(self.pushButton_4)

        self.pushButton_6 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_6.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/Icons/search.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_6.setIcon(icon6)
        self.pushButton_6.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.search)
        self.verticalLayout_4.addWidget(self.pushButton_6)

        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(260, 0, 60, 28))
        self.pushButton_7.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/Icons/Save.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_7.setIcon(icon7)
        self.pushButton_7.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.save)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setSizeGripEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 949, 25))
        self.menuBar.setObjectName("menuBar")
        self.menuInfo = QtWidgets.QMenu(self.menuBar)
        self.menuInfo.setAutoFillBackground(True)
        self.menuInfo.setTearOffEnabled(False)
        self.menuInfo.setTitle("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/Icons/Questionshield.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuInfo.setIcon(icon8)
        self.menuInfo.setToolTipsVisible(True)
        self.menuInfo.setObjectName("menuInfo")
        MainWindow.setMenuBar(self.menuBar)
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setObjectName("actionHelp")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionHelp_2 = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.actionHelp_2.setFont(font)
        self.actionHelp_2.setMenuRole(QtWidgets.QAction.PreferencesRole)
        self.actionHelp_2.setObjectName("actionHelp_2")
        self.actionHelp_2.triggered.connect(self.help)
        self.actionAbout_2 = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.actionAbout_2.setFont(font)
        self.actionAbout_2.setObjectName("actionAbout_2")
        self.actionAbout_2.triggered.connect(self.about)
        self.menuInfo.addAction(self.actionHelp_2)
        self.menuInfo.addAction(self.actionAbout_2)
        self.menuBar.addAction(self.menuInfo.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        

    def retranslateUi(self, MainWindow):
        self._translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(self._translate("MainWindow", "ImageToolkit"))
        self.label.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Processing image</span></p></body></html>"))
        self.label.setText(self._translate("MainWindow", "No Image selected"))
        self.label_3.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Original image</span></p></body></html>"))
        self.label_3.setText(self._translate("MainWindow", "No Image selected"))
        self.pushButton.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Ajust brightness,color,constrast,tone,sharpness and saturation</span></p></body></html>"))
        self.pushButton_2.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Use filters like Sobel,Gaussian,Blur and others</span></p></body></html>"))
        self.pushButton_5.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Inverter,rotater,eroder,dilater</span></p></body></html>"))
        self.pushButton_3.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Use machine learning to quantizer pixels of image</span></p></body></html>"))
        self.pushButton_4.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Back to the original</span></p></body></html>"))
        self.pushButton_6.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Search image in your documents</span></p></body></html>"))
        self.pushButton_7.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Save Image</span></p></body></html>"))
        self.menuBar.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Information</span></p></body></html>"))
        self.actionHelp.setText(self._translate("MainWindow", "Help"))
        self.actionAbout.setText(self._translate("MainWindow", "About"))
        self.actionHelp_2.setText(self._translate("MainWindow", "Help"))
        self.actionHelp_2.setIconText(self._translate("MainWindow", "Help"))
        self.actionAbout_2.setText(self._translate("MainWindow", "About"))
        self.btn.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Update changes</span></p></body></html>"))
    
    # Ajust images
    def imgAjust(self) -> None:
        if (self.imgOrig is not None):

            for child in reversed(range(self.verticalLayout_2.count())):
                self.verticalLayout_2.itemAt(child).widget().deleteLater()
            
            # label filter
            label = QtWidgets.QLabel()
            label.setFixedSize(239,30)
            font = QtGui.QFont()
            font.setFamily("Courier New")
            font.setPointSize(10)
            font.setBold(True)
            font.setWeight(75)
            label.setFont(font)

            # Brightness
            widgetBrightness = QtWidgets.QSlider(QtCore.Qt.Horizontal)
            widgetBrightness.setRange(1,100)
            widgetBrightness.setSingleStep(1)
            widgetBrightness.setValue(50)
            widgetBrightness.valueChanged.connect(lambda value: self.controlImage(("Brightness",value)))
            widgetBrightness.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Brightness</span></p></body></html>"))
            self.verticalLayout_2.addWidget(widgetBrightness)

            # Contrast
            widgetContrast = QtWidgets.QSlider(QtCore.Qt.Horizontal)
            widgetContrast.setRange(1,100)
            widgetContrast.setSingleStep(1)
            widgetContrast.setValue(50)
            widgetContrast.valueChanged.connect(lambda value: self.controlImage(("Contrast",value)))
            widgetContrast.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Contrast </span></p></body></html>"))
            self.verticalLayout_2.addWidget(widgetContrast)

            # Sharness
            widgetSharness = QtWidgets.QSlider(QtCore.Qt.Horizontal)
            widgetSharness.setRange(1,100)
            widgetSharness.setSingleStep(1)
            widgetSharness.setValue(50)
            widgetSharness.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sharness</span></p></body></html>"))
            widgetSharness.valueChanged.connect(lambda value: self.controlImage(("Sharness",value)))
            self.verticalLayout_2.addWidget(widgetSharness)

            # Color
            widgetColor = QtWidgets.QSlider(QtCore.Qt.Horizontal)
            widgetColor.setRange(1,100)
            widgetColor.setSingleStep(1)
            widgetColor.setValue(50)
            widgetColor.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Color</span></p></body></html>"))
            widgetColor.valueChanged.connect(lambda value: self.controlImage(("Color",value)))
            self.verticalLayout_2.addWidget(widgetColor)

            # Tone
            widgetTone = QtWidgets.QSlider(QtCore.Qt.Horizontal)
            widgetTone.setRange(1,100)
            widgetTone.setSingleStep(1)
            widgetTone.setValue(50)
            widgetTone.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Tone</span></p></body></html>"))
            widgetTone.valueChanged.connect(lambda value: self.controlImage(("Tone",value)))
            self.verticalLayout_2.addWidget(widgetTone)

            # Saturation
            widgetSaturation = QtWidgets.QSlider(QtCore.Qt.Horizontal)
            widgetSaturation.setRange(1,100)
            widgetSaturation.setSingleStep(1)
            widgetSaturation.setValue(50)
            widgetSaturation.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Saturation</span></p></body></html>"))
            widgetSaturation.valueChanged.connect(lambda value: self.controlImage(("Saturation",value)))
            self.verticalLayout_2.addWidget(widgetSaturation)
        
        else:
            QtWidgets.QMessageBox.warning(None,"Warning","Select image first")

    # Auxiliary function (Ajust)
    def controlImage(self,value:tuple) -> None:
        if (value[0] == "Brightness"): 
            self.ajustImageDict[value[0]] = value[1]
        elif (value[0] == "Contrast"):
            self.ajustImageDict[value[0]] = value[1]
        elif (value[0] == "Sharness"):
            self.ajustImageDict[value[0]] = value[1]
        elif (value[0] == "Color"):
            self.ajustImageDict[value[0]] = value[1]
        elif (value[0] == "Tone"):
            self.ajustImageDict[value[0]] = value[1]
        elif (value[0] == "Saturation"):
            self.ajustImageDict[value[0]] = value[1]

        
        self.imgCopy = self.ajust.controlImage(self.ajustImageDict)
        self.updateImage()
        

    # Filters

    def imgFilter(self) -> None:
        if (self.imgOrig is not None):
            # Reuse layout
            for child in reversed(range(self.verticalLayout_2.count())):
                self.verticalLayout_2.itemAt(child).widget().deleteLater()

            # Header
            label = QtWidgets.QLabel("Image Filters")
            label.setFixedSize(239,30)
            font = QtGui.QFont()
            font.setFamily("Courier New")
            font.setPointSize(10)
            font.setBold(True)
            font.setWeight(75)
            label.setFont(font)
            self.verticalLayout_2.addWidget(label)

            # List Filters
            widgetFilters = QtWidgets.QListWidget()
            widgetFilters.addItems([
                "Sobel","Scharr","Laplacian","Blur","Median Blur","Bilateral","Filter2D",
                "Gaussian"])
            widgetFilters.currentItemChanged.connect(self.selectFilter)
            self.verticalLayout_2.addWidget(widgetFilters)

        else:
            QtWidgets.QMessageBox.warning(None,"Warning","Select image first")


    def selectFilter(self,value:QtWidgets.QListWidget) -> None:
        # Reuse layout
        for child in reversed(range(self.verticalLayout_2.count())):
            self.verticalLayout_2.itemAt(child).widget().deleteLater()
        
        # label filter
        label = QtWidgets.QLabel()
        label.setFixedSize(239,30)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        label.setFont(font)
        

        if value.text() == "Sobel":
            # Header
            self.auxiliaryFunction(label,value)

            # Filter layout
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # Derivate of axis X
            derivateX = QtWidgets.QSpinBox()
            derivateX.setRange(0,5)
            derivateX.setSingleStep(1)
            derivateX.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Derivate orden axis X</span></p></body></html>"))
            derivateX.valueChanged.connect(self.deriveX)
            self.verticalLayout_2.addWidget(derivateX)

            # Derivate of axis Y
            derivateY = QtWidgets.QSpinBox()
            derivateY.setRange(0,5)
            derivateY.setSingleStep(1)
            derivateY.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Derivate orden axis Y</span></p></body></html>"))
            derivateY.valueChanged.connect(self.deriveY)
            self.verticalLayout_2.addWidget(derivateY)

            # Scale
            scale = QtWidgets.QDoubleSpinBox()
            scale.setRange(0,10)
            scale.setSingleStep(0.10)
            scale.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Scale factor</span></p></body></html>"))
            scale.valueChanged.connect(self.scaleFilter)
            self.verticalLayout_2.addWidget(scale)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applySobel)
            self.verticalLayout_2.addWidget(apply)

        elif value.text() == "Scharr":
            # Header
            self.auxiliaryFunction(label,value)

            # Derivate of axis X
            derivateX = QtWidgets.QSpinBox()
            derivateX.setRange(0,5)
            derivateX.setSingleStep(1)
            derivateX.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Derivate orden axis X</span></p></body></html>"))
            derivateX.valueChanged.connect(self.deriveX)
            self.verticalLayout_2.addWidget(derivateX)

            # Derivate of axis Y
            derivateY = QtWidgets.QSpinBox()
            derivateY.setRange(0,5)
            derivateY.setSingleStep(1)
            derivateY.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Derivate orden axis Y</span></p></body></html>"))
            derivateY.valueChanged.connect(self.deriveY)
            self.verticalLayout_2.addWidget(derivateY)

            # Scale
            scale = QtWidgets.QDoubleSpinBox()
            scale.setRange(0,10)
            scale.setSingleStep(0.10)
            scale.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Scale factor</span></p></body></html>"))
            scale.valueChanged.connect(self.scaleFilter)
            self.verticalLayout_2.addWidget(scale)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyScharr)
            self.verticalLayout_2.addWidget(apply)

        elif value.text() == "Laplacian":
            # Header
            self.auxiliaryFunction(label,value)

            # Filter layout
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # Scale
            scale = QtWidgets.QDoubleSpinBox()
            scale.setRange(0,10)
            scale.setSingleStep(0.10)
            scale.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Scale factor</span></p></body></html>"))
            scale.valueChanged.connect(self.scaleFilter)
            self.verticalLayout_2.addWidget(scale)

            # Delta
            delta = QtWidgets.QDoubleSpinBox()
            delta.setRange(0,10)
            delta.setSingleStep(0.10)
            delta.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Delta factor</span></p></body></html>"))
            delta.valueChanged.connect(self.deltaFilter)
            self.verticalLayout_2.addWidget(delta)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyLaplacian)
            self.verticalLayout_2.addWidget(apply)

        elif value.text() == "Blur":
            # Header
            self.auxiliaryFunction(label,value)

            # Kernel
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyBlur)
            self.verticalLayout_2.addWidget(apply)

        elif value.text() == "Median Blur":
            # Header
            self.auxiliaryFunction(label,value)

            # Kernel
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyMedian)
            self.verticalLayout_2.addWidget(apply)
    
        elif value.text() == "Bilateral":
            # Header 
            self.auxiliaryFunction(label,value)

            # Kernel
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # SigmaColor
            sigmaColor = QtWidgets.QSpinBox()
            sigmaColor.setRange(0,200)
            sigmaColor.setSingleStep(1)
            sigmaColor.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma Color</span></p></body></html>"))
            sigmaColor.valueChanged.connect(self.sigmaColor)
            self.verticalLayout_2.addWidget(sigmaColor)

            # Sigma Space
            sigmaSpace = QtWidgets.QSpinBox()
            sigmaSpace.setRange(0,200)
            sigmaSpace.setSingleStep(1)
            sigmaSpace.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma Space</span></p></body></html>"))
            sigmaSpace.valueChanged.connect(self.sigmaSpace)
            self.verticalLayout_2.addWidget(sigmaSpace)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyBilateral)
            self.verticalLayout_2.addWidget(apply)

        elif value.text() == "Filter2D":
            # Header
            self.auxiliaryFunction(label,value)

            # Kernel
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # Delta
            delta = QtWidgets.QDoubleSpinBox()
            delta.setRange(0,10)
            delta.setSingleStep(0.10)
            delta.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Delta factor</span></p></body></html>"))
            delta.valueChanged.connect(self.deltaFilter)
            self.verticalLayout_2.addWidget(delta)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyFilter2D)
            self.verticalLayout_2.addWidget(apply)

        elif value.text() == "Gaussian":
            # Header
            self.auxiliaryFunction(label,value)

            # Kernel
            kernel = QtWidgets.QSpinBox()
            kernel.setRange(1,9)
            kernel.setSingleStep(1)
            kernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size</span></p></body></html>"))
            kernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(kernel)

            # Sigma_X
            sigmaX = QtWidgets.QDoubleSpinBox()
            sigmaX.setRange(0,1)
            sigmaX.setSingleStep(0.05)
            sigmaX.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma X </span></p></body></html>"))
            sigmaX.valueChanged.connect(self.sigmaX)
            self.verticalLayout_2.addWidget(sigmaX)

            # Sigma_Y
            sigmaY = QtWidgets.QDoubleSpinBox()
            sigmaY.setRange(0,1)
            sigmaY.setSingleStep(0.05)
            sigmaY.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma Y </span></p></body></html>"))
            sigmaY.valueChanged.connect(self.sigmaY)
            self.verticalLayout_2.addWidget(sigmaY)

            # Apply
            apply = QtWidgets.QPushButton()
            apply.setFont(font)
            apply.setText("Apply")
            apply.clicked.connect(self.applyGaussian)
            self.verticalLayout_2.addWidget(apply)

        
    # Auxiliary functions (Filters)

    def kernelSize(self,value:int) -> None:
        self.kernel = value
        
    def deriveX(self,value:int) -> None:
        self.devX = value
        
    def deriveY(self,value:int) -> None:
        self.devY = value
    
    def scaleFilter(self,value:float) -> None:
        self.scalefilter = value
        
    def deltaFilter(self,value:float) -> None:
        self.deltafilter = value
    
    def sigmaColor(self,value:int) -> None:
        self.sigmacolor = value
    
    def sigmaSpace(self,value:int) -> None:
        self.sigmaspace = value
    
    def sigmaX(self,value:float) -> None:
        self.sigX = value
    
    def sigmaY(self,value:float) -> None:
        self.sigY = value
    
    def alpha(self,value:float) -> None:
        self.alphA = value
    
    def beta(self,value:float) -> None:
        self.betA = value

    def ganma(self,value:float) -> None:
        self.ganmA = value


    # Applying funcion (Filters)

    def applySobel(self) -> None:
        try:
            self.imgCopy = self.filt.sobel(self.kernel,self.devX,self.devY,self.scalefilter)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values: kise > order (dx,dy), 
                                    kernel 1,3,5,7,9 
                                    dx o dy > 0
                Fill all variables""")

    def applyScharr(self) -> None:
        try:
            self.imgCopy = self.filt.scharr(self.devX,self.devY,self.scalefilter)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values: dx >= 0 && dy >= 0 && dx+dy == 1
                Fill all variables""")

    def applyBlur(self) -> None:
        try:
            self.imgCopy = self.filt.bluring(self.kernel)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values:0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height
                           kernel 1,3,5,7,9
                Fill all variables""")

    def applyLaplacian(self) -> None:
        try:
            self.imgCopy = self.filt.laplacian(self.kernel,self.scalefilter,self.deltafilter)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
           QtWidgets.QMessageBox.warning(None,"Warring",
           """True values: kernel 1,3,5,7,9
              Fill all variables
           """)

    def applyMedian(self) -> None:
        try:
            self.imgCopy = self.filt.medianblur(self.kernel)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values: kernel 1,3,5,7,9
               Fill all variables
            """)

    def applyBilateral(self) -> None:
        try:
            self.imgCopy = self.filt.bilateralfilter(self.kernel,self.sigmacolor,self.sigmaspace)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values: size = 5 default 
                            sigcolor,sigspace <= 10 low effect | >= 150 stronger
               True values: kernel 1,3,5,7,9
               Fill all variables
            """)

    def applyFilter2D(self) -> None:
        try:
            self.imgCopy = self.filt.filter2D(self.kernel,self.deltafilter)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values: kernel 1,3,5,7,9
               Fill all variables
            """)
        

    def applyGaussian(self) -> None:
        try:
            self.imgCopy = self.filt.gaussian(self.kernel,self.sigX,self.sigY)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warring",
            """True values: kernel 1,3,5,7,9 
               Fill all variables
            """)
        
    
        
    # Quantization

    def imgQuantized(self) -> None:
        if (self.imgOrig is not None):

            # Reuse layout
            for child in reversed(range(self.verticalLayout_2.count())):
                self.verticalLayout_2.itemAt(child).widget().deleteLater()
            
            # Header
            label = QtWidgets.QLabel("Quantizer Image")
            label.setFixedSize(239,30)
            font = QtGui.QFont()
            font.setFamily("Courier New")
            font.setPointSize(10)
            font.setBold(True)
            font.setWeight(75)
            label.setFont(font)
            self.verticalLayout_2.addWidget(label)

            # Criteral 
            widgetCriterial = QtWidgets.QComboBox()
            widgetCriterial.addItems(["EPS","MAX_ITER","EPS/MAX_ITER"])
            widgetCriterial.setEditable(False)
            widgetCriterial.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Criterial to stop training </span></p></body></html>"))
            widgetCriterial.currentTextChanged.connect(self.quantizedCriterial)
            self.verticalLayout_2.addWidget(widgetCriterial)

            # Flags
            widgetFlags = QtWidgets.QComboBox()
            widgetFlags.addItems(["Random_Center","PP_Center"])
            widgetFlags.setEditable(False)
            widgetFlags.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Flag to select the type of center closters </span></p></body></html>"))
            widgetFlags.currentTextChanged.connect(self.quantizedFlags)
            self.verticalLayout_2.addWidget(widgetFlags)

            # Closter
            widgetCloster = QtWidgets.QSpinBox()
            widgetCloster.setRange(1,100)
            widgetCloster.setSingleStep(1)
            widgetCloster.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Number of closters </span></p></body></html>"))
            widgetCloster.valueChanged.connect(self.quantizedCloster)
            self.verticalLayout_2.addWidget(widgetCloster)

            # Attempt
            widgetAttempt = QtWidgets.QSpinBox()
            widgetAttempt.setRange(1,100)
            widgetAttempt.setSingleStep(1)
            widgetAttempt.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Number of attempts </span></p></body></html>"))
            widgetAttempt.valueChanged.connect(self.quantizedAttempt)
            self.verticalLayout_2.addWidget(widgetAttempt)

            # Maxiter
            widgetIter = QtWidgets.QSpinBox()
            widgetIter.setRange(1,100)
            widgetIter.setSingleStep(1)
            widgetIter.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Maximun of iterations </span></p></body></html>"))
            widgetIter.valueChanged.connect(self.quantizedIter)
            self.verticalLayout_2.addWidget(widgetIter)

            # Epsilon
            widgetEpsilon = QtWidgets.QDoubleSpinBox()
            widgetEpsilon.setRange(0,1)
            widgetEpsilon.setSingleStep(0.10)
            widgetEpsilon.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Epsilon (presition 0...1) </span></p></body></html>"))
            widgetEpsilon.valueChanged.connect(self.quantizedEpsilon)
            self.verticalLayout_2.addWidget(widgetEpsilon)

            # Apply function
            quantizedBottom = QtWidgets.QPushButton("Apply")
            quantizedBottom.clicked.connect(self.quantizedApply)
            self.verticalLayout_2.addWidget(quantizedBottom)
        
        else:
            QtWidgets.QMessageBox.warning(None,"Warning","Select image first")

    # Auxiliary function (Quantization)

    def quantizedCriterial(self,value:QtWidgets.QComboBox) -> None:
        self.criterial = value
    
    def quantizedFlags(self,value:QtWidgets.QComboBox) -> None:
        self.flags = value
    
    def quantizedCloster(self,value:int) -> None:
        self.cloters = value
    
    def quantizedAttempt(self,value:int) -> None:
        self.attempt = value
    
    def quantizedIter(self,value:int) -> None:
        self.iterations = value
    
    def quantizedEpsilon(self,value:float) -> None:
        self.epsilon = value


    # Apply funcion (Quantizer)
    
    def quantizedApply(self) -> None:
        try:
            self.imgCopy = self.quant.imgQuantization(self.cloters,self.attempt,self.criterial,self.flags,self.iterations,self.epsilon)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","Fill all variables")


   # Transformation

    def transformations(self) -> None:
        if (self.imgOrig is not None):
            # Reuse layout
            for child in reversed(range(self.verticalLayout_2.count())):
                self.verticalLayout_2.itemAt(child).widget().deleteLater()
            
            widgetTrans = QtWidgets.QListWidget()
            widgetTrans.addItems(["Geometric","Cartooning","Morph"])
            widgetTrans.currentItemChanged.connect(self.imgTrans)
            self.verticalLayout_2.addWidget(widgetTrans)
        
        else: QtWidgets.QMessageBox.warning(None,"Warning","Select image first")
       

    def imgTrans(self,value:QtWidgets.QListWidget) -> None:
        # Reuse layout
        for child in reversed(range(self.verticalLayout_2.count())):
            self.verticalLayout_2.itemAt(child).widget().deleteLater()
        
        # Header
        label = QtWidgets.QLabel(value.text())
        label.setFixedSize(239,30)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        label.setFont(font)

        if value.text() == "Geometric":
            # Header 
            self.auxiliaryFunction(label,value)

            # Action button to inverter
            inverter = QtWidgets.QPushButton("Inverter")
            inverter.clicked.connect(self.imgInverter) 
            self.verticalLayout_2.addWidget(inverter)

            # Rotate image (degree)
            rotationEntry = QtWidgets.QComboBox()
            rotationEntry.addItems(["30","45","90","180"])
            rotationEntry.setEditable(False)
            rotationEntry.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Rotation of image in degree </span></p></body></html>"))
            rotationEntry.currentTextChanged.connect(self.imgRotation)
            self.verticalLayout_2.addWidget(rotationEntry)

            # Action rotation
            rotationAction = QtWidgets.QPushButton("Apply Rotation")
            rotationAction.clicked.connect(self.applyRotation)
            self.verticalLayout_2.addWidget(rotationAction)
        
        elif value.text() == "Cartooning":
            # Header
            self.auxiliaryFunction(label,value)

            widgetCartooning = QtWidgets.QListWidget()
            widgetCartooning.addItems(["Pencil Skecth","Stylization","Style combined"])
            widgetCartooning.currentItemChanged.connect(self.cartooningSelection)
            self.verticalLayout_2.addWidget(widgetCartooning)

        elif value.text() == "Morph":
            # Header 
            self.auxiliaryFunction(label,value)

            widgetMorph = QtWidgets.QListWidget()
            widgetMorph.addItems(["Dilate","Erode","MorphoEx"])
            widgetMorph.currentItemChanged.connect(self.morphSelection)
            self.verticalLayout_2.addWidget(widgetMorph)
        
        


    # Auxiliary functions (Transformation)
    def imgInverter(self) -> None:
        self.imgCopy = self.transf_Geo.imgInverted()
        pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
        self.label.setPixmap(pixmap)

    def imgRotation(self,value:str) -> None:
        self.rotation = int(value)
    
    def applyRotation(self) -> None:
        try:
            self.imgCopy = self.transf_Geo.imgRotated(self.rotation)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","Select angle")

    def cartooningSelection(self,value:QtWidgets.QListWidget) -> None:
        # Reuse layout
        for child in reversed(range(self.verticalLayout_2.count())):
            self.verticalLayout_2.itemAt(child).widget().deleteLater()
        
        # Header
        label = QtWidgets.QLabel(value.text())
        label.setFixedSize(239,30)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        label.setFont(font)
        
        if value.text() == "Pencil Skecth":
            # Header
            self.auxiliaryFunction(label,value)

            # Flag
            widgetFlag = QtWidgets.QSpinBox()
            widgetFlag.setRange(0,1)
            widgetFlag.setSingleStep(1)
            widgetFlag.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Select flag 0 or 1 to user sketch </span></p></body></html>"))
            widgetFlag.valueChanged.connect(self.transFlag)
            self.verticalLayout_2.addWidget(widgetFlag)

            # Sigma S
            widgetSig_s = QtWidgets.QSpinBox()
            widgetSig_s.setRange(0,200)
            widgetSig_s.setSingleStep(1)
            widgetSig_s.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\"> Sigma Space </span></p></body></html>"))
            widgetSig_s.valueChanged.connect(self.sigmaSpace)
            self.verticalLayout_2.addWidget(widgetSig_s)

            # Sigma R
            widgetSig_r = QtWidgets.QDoubleSpinBox()
            widgetSig_r.setRange(0,1)
            widgetSig_r.setSingleStep(0.10)
            widgetSig_r.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma Ratio</span></p></body></html>"))
            widgetSig_r.valueChanged.connect(self.sigma_R)
            self.verticalLayout_2.addWidget(widgetSig_r)

            # Shader
            widgetShader_F = QtWidgets.QDoubleSpinBox()
            widgetShader_F.setRange(0,0.1)
            widgetShader_F.setSingleStep(0.01)
            widgetShader_F.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Shader factor </span></p></body></html>"))
            widgetShader_F.valueChanged.connect(self.shaderFactor)
            self.verticalLayout_2.addWidget(widgetShader_F)

            # Apply
            btnapply = QtWidgets.QPushButton("Apply")
            btnapply.clicked.connect(self.sketchApply)
            self.verticalLayout_2.addWidget(btnapply)

        elif value.text() == "Stylization":
            # Header
            self.auxiliaryFunction(label,value)

            # Sigma S
            widgetSig_s = QtWidgets.QSpinBox()
            widgetSig_s.setRange(0,200)
            widgetSig_s.setSingleStep(1)
            widgetSig_s.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\"> Sigma Space </span></p></body></html>"))
            widgetSig_s.valueChanged.connect(self.sigmaSpace)
            self.verticalLayout_2.addWidget(widgetSig_s)

            # Sigma R
            widgetSig_r = QtWidgets.QDoubleSpinBox()
            widgetSig_r.setRange(0,1)
            widgetSig_r.setSingleStep(0.10)
            widgetSig_r.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma Ratio</span></p></body></html>"))
            widgetSig_r.valueChanged.connect(self.sigma_R)
            self.verticalLayout_2.addWidget(widgetSig_r)

            # Apply
            btnapply = QtWidgets.QPushButton("Apply")
            btnapply.clicked.connect(self.styleApply)
            self.verticalLayout_2.addWidget(btnapply)

        elif value.text() == "Style combined":
            # Header
            self.auxiliaryFunction(label,value)

            # Flag
            widgetFlag = QtWidgets.QSpinBox()
            widgetFlag.setRange(0,1)
            widgetFlag.setSingleStep(1)
            widgetFlag.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Select flag 0 or 1 to user sketch </span></p></body></html>"))
            widgetFlag.valueChanged.connect(self.transFlag)
            self.verticalLayout_2.addWidget(widgetFlag)

            # Sigma S
            widgetSig_s = QtWidgets.QSpinBox()
            widgetSig_s.setRange(0,200)
            widgetSig_s.setSingleStep(1)
            widgetSig_s.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\"> Sigma Space </span></p></body></html>"))
            widgetSig_s.valueChanged.connect(self.sigmaSpace)
            self.verticalLayout_2.addWidget(widgetSig_s)

            # Sigma R
            widgetSig_r = QtWidgets.QDoubleSpinBox()
            widgetSig_r.setRange(0,1)
            widgetSig_r.setSingleStep(0.10)
            widgetSig_r.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Sigma Ratio</span></p></body></html>"))
            widgetSig_r.valueChanged.connect(self.sigma_R)
            self.verticalLayout_2.addWidget(widgetSig_r)

            # Shader
            widgetShader_F = QtWidgets.QDoubleSpinBox()
            widgetShader_F.setRange(0,0.1)
            widgetShader_F.setSingleStep(0.01)
            widgetShader_F.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Shader factor </span></p></body></html>"))
            widgetShader_F.valueChanged.connect(self.shaderFactor)
            self.verticalLayout_2.addWidget(widgetShader_F)

            # Apply
            btnapply = QtWidgets.QPushButton("Apply")
            btnapply.clicked.connect(self.combinedApply)
            self.verticalLayout_2.addWidget(btnapply)
    
    def morphSelection(self,value:QtWidgets.QListWidget) -> None:
         # Reuse layout
        for child in reversed(range(self.verticalLayout_2.count())):
            self.verticalLayout_2.itemAt(child).widget().deleteLater()
        
        # Header
        label = QtWidgets.QLabel(value.text())
        label.setFixedSize(239,30)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        label.setFont(font)

        if value.text() == "Dilate":
            # Header
            self.auxiliaryFunction(label,value)

            # kernel
            widgetKernel = QtWidgets.QSpinBox()
            widgetKernel.setRange(1,9)
            widgetKernel.setSingleStep(1)
            widgetKernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size </span></p></body></html>"))
            widgetKernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(widgetKernel)

            # Iteration 
            widgetIter = QtWidgets.QSpinBox()
            widgetIter.setRange(1,100)
            widgetIter.setSingleStep(1)
            widgetIter.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Number of iterations </span></p></body></html>"))
            widgetIter.valueChanged.connect(self.morphIter)
            self.verticalLayout_2.addWidget(widgetIter)
            
            # Action
            btnapply = QtWidgets.QPushButton("Apply")
            btnapply.clicked.connect(self.dilateApply)
            self.verticalLayout_2.addWidget(btnapply)

        elif value.text() == "Erode":
            # Header
            self.auxiliaryFunction(label,value)

            # kernel
            widgetKernel = QtWidgets.QSpinBox()
            widgetKernel.setRange(1,9)
            widgetKernel.setSingleStep(1)
            widgetKernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">kernel size </span></p></body></html>"))
            widgetKernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(widgetKernel)

            # Iteration 
            widgetIter = QtWidgets.QSpinBox()
            widgetIter.setRange(1,100)
            widgetIter.setSingleStep(1)
            widgetIter.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Number of iterations </span></p></body></html>"))
            widgetIter.valueChanged.connect(self.morphIter)
            self.verticalLayout_2.addWidget(widgetIter)
            
            # Action
            btnapply = QtWidgets.QPushButton("Apply")
            btnapply.clicked.connect(self.erodeApply)
            self.verticalLayout_2.addWidget(btnapply)

        elif value.text() == "MorphoEx":
            # Header
            self.auxiliaryFunction(label,value)

            # kernel
            widgetKernel = QtWidgets.QSpinBox()
            widgetKernel.setRange(1,9)
            widgetKernel.setSingleStep(1)
            widgetKernel.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Kernel size </span></p></body></html>"))
            widgetKernel.valueChanged.connect(self.kernelSize)
            self.verticalLayout_2.addWidget(widgetKernel)

            # MorphDict
            widgetMorphoDict = QtWidgets.QComboBox()
            widgetMorphoDict.addItems(["Open","Close","TopHat","Gradient","BlackHat","Cross","Hitmiss","Ellipse","Dilate","Erode"])
            widgetMorphoDict.setEditable(False)
            widgetMorphoDict.setToolTip(self._translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">Morpho operation </span></p></body></html>"))
            widgetMorphoDict.currentTextChanged.connect(self.morphEx)
            self.verticalLayout_2.addWidget(widgetMorphoDict)

            # Action
            btnapply = QtWidgets.QPushButton("Apply")
            btnapply.clicked.connect(self.morphApply)
            self.verticalLayout_2.addWidget(btnapply)


    def transFlag(self,value:int) -> None:
        self.trflags = value
    
    def sigma_R(self,value:float) -> None:
        self.sigR = value
    
    def shaderFactor(self,value:float) -> None:
        self.shader = value
    
    def morphIter(self,value:int) -> None:
        self.morIt = value
    
    def morphEx(self,value:str) -> None:
        self.morEx = value
    
    
    # Apply transformation (Transformation)

    def sketchApply(self) -> None:
        try:
            self.imgCopy = self.transf_Cart.getPencils(self.trflags,self.sigmaspace,self.sigR,self.shader)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","Fill all variables")

    def styleApply(self) -> None:
        try:
            self.imgCopy = self.transf_Cart.imageStyle(self.sigmaspace,self.sigR)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","Fill all variables")

    def combinedApply(self) -> None:
        try:
            self.imgCopy = self.transf_Cart.combStyles(self.trflags,self.sigmaspace,self.sigR,self.shader)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","Fill all variables")
        
    
    def dilateApply(self) -> None:
        try:
            self.imgCopy = self.transf_Morph.imgDilate(self.kernel,self.morIt)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning",
            """True values: kernel 1,3,5,7
                Fill all variables""")
        

    def erodeApply(self) -> None:
        try:
            self.imgCopy = self.transf_Morph.imgErode(self.kernel,self.morIt)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","""True values: kernel 1,3,5,7
                Fill all variables""")

    def morphApply(self) -> None:
        try:
            self.imgCopy = self.transf_Morph.imgMorphoEx(self.kernel,self.morEx)
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        except:
            QtWidgets.QMessageBox.warning(None,"Warning","""True values: kernel 1,3,5,7
                Fill all variables""")


    # Utility functions

    def save(self) -> None:
        if (self.imgOrig is not None):
            file,_ = QtWidgets.QFileDialog.getSaveFileName(None,"Save your image",QtCore.QDir.homePath(),"Files (*.jpg;*.png)")
            if file :
                cv2.imwrite(file,self.imgCopy)
        else:
            QtWidgets.QMessageBox.warning(None,"Warning","Select image first")

    def search(self) -> None:
        # Search image in your files
        file,_ = QtWidgets.QFileDialog.getOpenFileName(None,"Search image file",QtCore.QDir.homePath(),"Files (*.jpg;*.png)")
        if file :
            self.imgOrig = cv2.imread(file)
            self.imgCopy = self.imgOrig.copy()
            img = self.opencvToQimage(self.imgOrig,self.label_3.width(),self.label_3.height())
            self.label_3.setPixmap(img)
            img = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(img)

            self.ajust = ImgAjust(self.imgCopy)
            self.filt = ImgFilter(self.imgCopy)
            self.quant = Ecualized(self.imgCopy)
            self.transf_Geo = ImageGeometric(self.imgCopy)
            self.transf_Morph = ImageMorph(self.imgCopy)
            self.transf_Cart = ImageCartoon(self.imgCopy)
            
    def restore(self ) -> None:
        if (self.imgOrig is not None):
            self.imgCopy = self.imgOrig.copy()
            self.commitImage()
            pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
            self.label.setPixmap(pixmap)
        else:
            QtWidgets.QMessageBox.warning(None,"Warning","Select image first")
    
    def help(self) -> None:
        QtWidgets.QMessageBox.information(None,"HELP","""
            *********************************************
             This aplication is for proccessing image   
            *********************************************
            Modules: Opencv 
                     PIL 
                     PyQt5 
                     Numpy 
            \n
            Filters: Sobel 
                     Scharr 
                     Laplacian 
                     Blur 
                     Median Blur 
                     Bilateral 
                     Filter2D 
                     GaussianBlur 
                     ImageAffined 
            \n            
            Ajust: Brightness
                   Contrast
                   Sharness 
                   Color
                   Tone
                   Saturation
            \n
            Ecualization: Kmeans
            \n                                     
            Transformation: Geometric 
                            Cartooning 
                            Morphology        
        """)
    
    def about(self) -> None:
        QtWidgets.QMessageBox.information(None,"ABOUT","""
            Created: 31/12/2021
            Autor: MBI
            Lincense: Open source
            Contact: maikel8807@gmail.com
            Version: 1.0.0
            Language: Python 3.9.7
        """)

    # Axuliary function (Desinger)

    def auxiliaryFunction(self,label:QtWidgets,value:str) -> None:
        """Function to desinger the vertical_layout2"""
        # Reuse layout
        for child in reversed(range(self.verticalLayout_2.count())):
                self.verticalLayout_2.itemAt(child).widget().deleteLater()

        # Header
        label.setText(value.text())
        self.verticalLayout_2.addWidget(label)
    
    def opencvToQimage(self,image:np.uint8,width:int,height:int) -> QtGui.QImage:
        size = image.shape
        byteperLine = image.size // size[0]
        qformat = QtGui.QImage.Format_Indexed8
        
        if len(size) == 3:
            if size[2] == 4:
                qformat = QtGui.QImage.Format_RGBA8888
            else:
                qformat = QtGui.QImage.Format_RGB888
        try:

            img = QtGui.QImage(image.data,size[1],size[0],byteperLine,qformat)
            img = img.rgbSwapped()
            img = img.scaled(width,height,QtCore.Qt.KeepAspectRatioByExpanding,QtCore.Qt.SmoothTransformation)
            pixmap = QtGui.QPixmap()
            pixmap.convertFromImage(img)
        except:
            QtWidgets.QMessageBox.critical(None,"Error","Error to load image\n Scaled image is null")
        return pixmap

    def updateImage(self) -> None:
        pixmap = self.opencvToQimage(self.imgCopy,self.label.width(),self.label.height())
        self.label.setPixmap(pixmap)
    
    def commitImage(self) -> None:
        self.imgOrig = self.imgCopy.copy()
        self.ajust.image = self.imgCopy
        self.transf_Geo.image = self.imgCopy
        self.transf_Cart.image = self.imgCopy
        self.transf_Morph.img = self.imgCopy
        self.filt.image = self.imgCopy
        self.quant.img = self.imgCopy
        
      
        
# Main

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
